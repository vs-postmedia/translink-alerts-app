{"version":3,"sources":["components/Aux/Aux.jsx","components/Input/Input.js","components/SummaryBox/SummaryBox.js","components/Card/Card.js","components/CardList/CardList.js","components/Layout/Layout.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Aux","props","children","Input","state","value","id","type","placeholder","this","onChange","Component","SummaryBox","stats","data","bus","routes","seabus","routeList","i","length","transitType","includes","route","push","calculateStats","className","Card","d","date","time","split","day","times","alertType","lastUpdate","info","CardList","sort","a","b","parseInt","map","key","Layout","filteredData","timestamp","fetch","dataURL","cache","then","response","json","setState","alerts","filter","setTimestamp","Moment","calendar","event","selectedRoute","target","toUpperCase","results","handleInputChange","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f91d05ed.chunk.js","sourcesContent":["const Aux = (props) => { return props.children; };\n\nexport default Aux;","import React, { Component } from 'react';\nimport Aux from '../Aux/Aux';\n\nexport class Input extends Component {\n\tstate = {value: 'Enter a bus number...'};\n\n\trender() {\n\t\treturn (\n\t\t\t<Aux>\n\t\t\t\t<label id=\"input\">\n\t\t\t\t\t<input type=\"text\" placeholder={this.state.value} onChange={this.props.onChange}/>\n\t\t\t\t</label>\n\t\t\t</Aux>\n\t\t)\n\t}\n\t\n}\n\nexport default Input;","import React from 'react';\nimport './SummaryBox.css';\n\n\nconst SummaryBox = (props) => {\n\tfunction calculateStats(data) {\n\t\tlet stats = {\n\t\t\tbus: 0,\n\t\t\troutes: 0,\n\t\t\tseabus: 0,\n\t\t\trouteList: []\n\t\t};\n\n\t\tfor (let i = 0; i < data.length; ++i) {\n\t\t\t// how many buses?\n\t\t\tif (data[i].transitType === 'bus') {\n\t\t\t\tstats.bus++\n\t\t\t} \n\t\t\t// how many routes?\n\t\t\tif (!stats.routeList.includes(data[i].route)) {\n\t\t\t\tstats.routeList.push(data[i].route);\n\t\t\t\tstats.routes++;\n\t\t\t}\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tconst stats = calculateStats(props.data);\n\n\treturn (\n\t\t<div className=\"summary-box\">\t\t\n\t\t\t<h2>There are <span className=\"highlight\">{`${stats.bus} buses`}</span> cancelled on <span className=\"highlight\">{`${stats.routes}`}</span> different routes.</h2>\n\t\t</div>\n\t)\n}\n\nexport default SummaryBox;\n\n","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n\tconst d = props.data;\n\n\tconst date = d.time.split('-')\n\tconst day = `${date[1]}. ${date[0]}`;\n\tconst times = d.time.split(' ');\n\tconst time = `${times[1]} ${times[2]} to ${times[5]} ${times[6]}`\n\t\n\treturn (\n\t\t<div className=\"card\">\n\t\t\t<header>\n\t\t\t\t<h2>{d.route}</h2>\n\t\t\t\t<p className=\"type\">{d.alertType}</p>\n\t\t\t</header>\n\n\t\t\t<div className=\"schedule\">\n\t\t\t\t<div className=\"date\">\n\t\t\t\t\t<p className=\"day\"><strong>{day}</strong></p>\n\t\t\t\t\t<p className=\"time\">{time}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"update\">\n\t\t\t\t\t<p><strong>Updated</strong></p>\n\t\t\t\t\t<p>about {d.lastUpdate}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\n\t\t\t<h4>Details</h4>\n\t\t\t<p className=\"info\">{d.info}</p>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default Card;\n\n\n\n","import React from 'react';\nimport Card from '../Card/Card';\nimport './CardList.css';\n\n\nconst CardList = (props) => {\n\tconst data = props.data.sort((a,b) => {\n\t\treturn parseInt(a.route) - parseInt(b.route);\n\t});\n\n \treturn (\n \t\t<div className=\"card-list\">\n \t\t\t{data.map((d,i) => {\n \t\t\t\treturn (\n \t\t\t\t\t<Card className='card' data={d} key={i} id={d.route}></Card>\n \t\t\t\t)\n \t\t\t})}\n \t\t</div>\n \t)\n\t\n}\n\n\nexport default CardList;\n","import React, { Component } from 'react';\nimport * as Moment from 'moment-timezone';\nimport Aux from '../Aux/Aux';\nimport Input from '../Input/Input';\nimport SummaryBox from '../SummaryBox/SummaryBox';\nimport CardList from '../CardList/CardList';\nimport './Layout.css';\n\nexport class Layout extends Component {\n\tstate = {\n\t\tdata: [],\n\t\tfilteredData: [],\n\t\ttimestamp: ''\n\t};\n\n\tcomponentDidMount() {\n\t\t// fetch data file but never take a cached version\n\t\tfetch(this.props.dataURL, {cache: 'no-store'})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => this.setState({ \n\t\t\t\tdata: data.alerts.filter(d => d.transitType === 'bus'), // filter out seabus cancellations\n\t\t\t\tfilteredData: data.alerts.filter(d => d.transitType === 'bus'), // filter out seabus cancellations\n\t\t\t\ttimestamp: this.setTimestamp(data.timestamp)\n\t\t\t}));\n\t}\n\n\tsetTimestamp(timestamp) {\n\t\treturn Moment.tz(timestamp, 'America/Vancouver').calendar();\n\t}\n\n\thandleInputChange(event) {\n\t\t// const selectedRoute = event.target.value === '' ? this.state.data : this.state.data.filter(d => d.route.includes(event.target.value));\n\t\tconst selectedRoute = event.target.value === '' ? this.state.data : this.state.data.filter(d => d.route === event.target.value.toUpperCase());\n\n\t\tthis.setState({\n\t\t\tfilteredData: selectedRoute\n\t\t});\n\t}\n\n\trender() {\n\t\tlet results;\n\t\tif (this.state.filteredData.length > 0) {\n\t\t\tresults = <CardList data={this.state.filteredData}></CardList>;\n\t\t} else {\n\t\t\tresults = <p className=\"no-data\">No cancellations</p>;\n\t\t}\n\t\treturn (\n\t\t\t<Aux>\n\t\t\t\t<h1>Is my bus cancelled?</h1>\n\t\t\t\t<Input onChange={this.handleInputChange.bind(this)}></Input>\n\t\t\t\t<SummaryBox data={this.state.data}></SummaryBox>\n\t\t\t\t{results}\n\t\t\t\t<footer className=\"footer\">{`Last update: ${this.state.timestamp}`}</footer>\n\t\t\t</Aux>\n\t\t);\n\t}\n}\n\nexport default Layout;\n","import React from 'react';\nimport Layout from '../Layout/Layout';\nimport './App.css';\n\n// VARS\nconst dataURL = 'https://vs-postmedia-data.sfo2.digitaloceanspaces.com/alerts.json';\n\nfunction App() {\n\treturn (\n\t  \t<div className=\"App\">\n\t  \t\t<Layout dataURL={dataURL}></Layout>\n\t  \t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport './css/index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}